{"version":3,"sources":["post.js","utils.js","BlogList.js","SearchView.js","LoginButton.js","App.js","serviceWorker.js","CommentList.js","commentData.js","ShowOne.js","deleteDone.js","ShowTags.js","Input.js","Form.js","LoginPage.js","index.js"],"names":["Post","id","author","text","tags","this","ID","AUTHOR","TEXT","TAGS","TIME","uusi","value","date","Date","parseInt","toUTCString","console","log","utils","fetch","method","idIn","authorIn","textIn","tag","length","vali","l","push","tagId","data","blogId","JSON","stringify","headers","body","then","response","alert","lap","comment","getAuthor","getText","authorData","textData","commentId","getID","useStyles2","makeStyles","theme","root","width","height","backgroundColor","palette","background","paper","BlogList","searchWord","props","classes2","lista","className","itemSize","itemCount","index","h","style","o","charAt","i","ListItem","key","onClick","window","location","assign","cursor","Box","ListItemText","primary","SearchView","React","useReducer","x","forceUpdate","onChange","e","onRequestSearch","json","item","post","margin","maxWidth","LoginButton","textOut","authorOut","Button","variant","color","suorita","TabPanel","children","other","Typography","component","role","hidden","aria-labelledby","p","a11yProps","load","firstTime","force","useStyles","flexGrow","App","classes","useState","setValue","useEffect","AppBar","position","Tabs","event","newValue","scrollButtons","indicatorColor","textColor","aria-label","Tab","label","icon","noValidate","autoComplete","TextField","target","multiline","rows","valiaikainen","split","size","startIcon","prototype","addNewPost","setTimeout","Boolean","hostname","match","commentData","overflowY","listaus","listStyleType","CommentList","blogPost","commentAuthor","commentText","handleClose","apu","setID","changeComment","values","IconButton","Dialog","open","onClose","DialogTitle","DialogContent","defaultValue","fullWidth","DialogActions","nayta","ShowOne","state","blog","params","setState","allcomments","display","justifyContent","flexWrap","spacing","root2","addPostWithTags","handleCloseComment","outData","addComment","reload","ids","list","setTIME","creationTime","com","tagsTexts","getTags","comments","Grid","container","xs","getTIME","removePost","Paper","map","data2","Chip","Component","DeleteDone","ShowTags","out","Input","error","handleError","opts","inputChange","Form","field","errmsg","prevState","failure","errcount","errmsgs","renderError","Object","find","v","handleSubmit","preventDefault","FormData","form","action","URLSearchParams","redirected","url","catch","warn","inputs","name","placeholder","type","errors","onSubmit","ref","fm","search","logout","$","html","localStorage","setItem","LoginPage","login","getItem","get","ajaxSetup","beforeSend","xhr","settings","test","setRequestHeader","Cookies","href","maini","posting","del","sign","Help","exact","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7ed15350.chunk.js","sourcesContent":["export default class Post {\n    constructor(id, author, text, tags) {\n        this.ID = id;\n        this.AUTHOR = author;\n        this.TEXT = text;\n        this.TAGS = tags;\n        this.TIME = \"null\";\n    }\n    getID(){\n        return this.ID;\n    }\n    getAuthor(){\n        return this.AUTHOR;\n    }\n    getText(){\n        return this.TEXT;\n    }\n    setText(uusi){\n        this.TEXT = uusi;\n    }\n    getTags(){\n        return this.TAGS;\n    }\n    setTags(uusi){\n        this.TAGS = uusi;\n    }\n    setTIME(value){\n        let date = new Date(parseInt(value));\n        this.TIME = date.toUTCString();\n        console.log(\"time: \" + this.TIME);\n    }\n    getTIME(){\n        return this.TIME;\n    }\n}","export default class utils {\n    //remove post from backend\n    removePost(id){\n        console.log(\"remove id:\" + id);\n        fetch(\"http://localhost:8080/delete/\" + id, {\n            method: 'DELETE',\n        });\n    }\n    //modify backend post\n    addPostWithTags(idIn, authorIn, textIn, tag){\n        if(tag.length >= 2) {\n            let vali = [];\n            for(let l=0; l < tag.length; l++){\n                vali.push({tagId : tag[l]});\n            }\n            const data = {blogId: idIn, author: authorIn, text: textIn, tags: vali};\n            console.log(\"data: \" + JSON.stringify(data));\n            fetch(\"http://localhost:8080/save\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            }).then(response => {\n                console.log(\"data send\");\n            });\n        } else{\n            alert(\"add least 2 tags. (separate tags with ,)\");\n        }\n    }\n    //add new post to backend with tags\n    addNewPost(authorIn,textIn, tag){\n        if(tag.length >= 2) {\n            let vali = [];\n            for(let lap=0; lap < tag.length; lap++){\n                vali.push({tagId : tag[lap]});\n            }\n            const data = {author: authorIn, text: textIn, tags: vali};\n            console.log(\"data: \" + JSON.stringify(data));\n            fetch(\"http://localhost:8080/save\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            }).then(response => {\n                console.log(\"data send\");\n            });\n        } else{\n            alert(\"add least 2 tags. (separate tags with ,)\");\n        }\n    }\n    //add comment\n    addComment(comment, id){\n        let authorData = comment.getAuthor();\n        let textData = comment.getText();\n        const data = {author: authorData, text: textData};\n        fetch(\"http://localhost:8080/comment/\" + id, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        })\n    }\n    //change comment\n    changeComment(comment, id){\n        let authorData = comment.getAuthor();\n        let textData = comment.getText();\n        let idu = comment.getID();\n        const data = {commentId: idu, author: authorData, text: textData};\n        console.log(\"data= \" + JSON.stringify(data));\n        fetch(\"http://localhost:8080/comment/\" + id, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        })\n    }\n}","import React from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {FixedSizeList} from \"react-window\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Box from \"@material-ui/core/Box\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nvar maxShowText = 10;\n//open blog post\nconst openBlog = (key) =>{\n    window.location.assign(\"../show/\" + key);\n};\nconst useStyles2 = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        height: '85vh',\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\nfunction BlogList(props) {\n    const classes2 = useStyles2();\n    const lista = props.lista;\n    return (<div className={classes2.root}>\n        <AutoSizer>\n            {({height, width}) => (\n                <FixedSizeList height={height} width={width} itemSize={500} itemCount={lista.length}>\n                    {({ index, style }) => {\n                        // list item. index is place of item in list or array\n                        let h = lista[index].getText();\n                        let o = \"\";\n                        for(let lap=0; lap < maxShowText; lap++){\n                            o += h.charAt(lap);\n                        }\n                        o += \"...\";\n                        let i = lista[index].getID();\n                        return (\n                            <ListItem key={index} onClick={() => openBlog(i)} style={{cursor: \"pointer\"}}>\n                                <Box width={1}>\n                                    <ListItemText primary={o}\n                                    >\n                                    </ListItemText>\n                                </Box>\n                            </ListItem>\n                        );\n                    }}\n                </FixedSizeList>\n            )}\n        </AutoSizer>\n    </div>);\n}\nexport default BlogList;","import React from 'react';\nimport post from \"./post\";\nimport BlogList from \"./BlogList\";\nimport SearchBar from 'material-ui-search-bar';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nvar lista = [];\nvar searchWord;\nfunction SearchView(){\n    const [, forceUpdate] = React.useReducer(x => x + 1, 0);\n    return (<MuiThemeProvider><div><SearchBar\n        onChange={(e) => {\n            searchWord = e;\n            console.log(\"searchWord: \" + searchWord);\n        }}\n        onRequestSearch={() => {\n            fetch(\"http://localhost:8080/search/\" + searchWord).then(response => response.json()).then(data => {\n                lista = [];\n                for (const item of data) {\n                    lista.push(new post(item.blogId, item.author, item.text, item.tags));\n                }\n            }).then(i => forceUpdate());\n        }}\n        style={{\n            margin: '0 auto',\n            maxWidth: 800\n        }}\n    /><br/>\n    <BlogList lista={lista}/>\n    </div></MuiThemeProvider>);\n}\n\nexport default SearchView;","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nfunction LoginButton() {\n    return(\n        <Button variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                    window.location.assign(\"/user\");\n                }}>Login</Button>\n    );\n}\n\nexport default LoginButton;","import React, {useEffect} from 'react';\nimport './App.css';\nimport post from \"./post\";\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport ViewStreamIcon from '@material-ui/icons/ViewStream';\nimport AddIcon from '@material-ui/icons/Add';\nimport Button from '@material-ui/core/Button';\nimport utils from \"./utils\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Center from 'react-center';\nimport SaveIcon from '@material-ui/icons/Save';\nimport SearchIcon from '@material-ui/icons/Search';\nimport BlogList from \"./BlogList\";\nimport SearchView from \"./SearchView\";\nimport LoginButton from \"./LoginButton\";\n\nvar lista = [];\nvar suorita = true;\n//text what send when create or modify post\nvar textOut;\n//author what send when create or modify post\nvar authorOut;\n//tags\nvar tags = [];\n//create tabpanel\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n      <Typography\n          component=\"div\"\n          role=\"tabpanel\"\n          hidden={value !== index}\n          id={`scrollable-force-tabpanel-${index}`}\n          aria-labelledby={`scrollable-force-tab-${index}`}\n          {...other}\n      >\n        {value === index && <Box p={3}>{children}</Box>}\n      </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-force-tab-${index}`,\n    'aria-controls': `scrollable-force-tabpanel-${index}`,\n  };\n}\n//load data from backend\nfunction load(firstTime, force) {\n    if(firstTime){\n        fetch(\"http://localhost:8080/blogs/\").then(response => response.json()).then(data => {\n            console.log(\"json: \" + JSON.stringify(data));\n            for (const item of data) {\n                lista.push(new post(item.blogId, item.author, item.text, item.tags));\n            }\n            suorita = false;\n        }).then(i => {\n            console.log(lista.length);\n            force();\n        });\n    } else{\n        fetch(\"http://localhost:8080/blogs/\").then(response => response.json()).then(data => {\n            console.log(\"json: \" + JSON.stringify(data));\n            lista = [];\n            for (const item of data) {\n                lista.push(new post(item.blogId, item.author, item.text, item.tags));\n            }\n        }).then(i => {\n            console.log(lista.length);\n            force();\n        });\n    }\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const [, forceUpdate] = React.useReducer(x => x + 1, 0);\n    //run when mount\n    useEffect(() => {\n        //check if code is not run before\n        if(suorita) {\n            load(true, forceUpdate);\n        }\n    });\n    //This handle tab bar change\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    return (\n        <div className={classes.root}>\n            <LoginButton/>\n            <AppBar position=\"static\" color=\"default\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    variant=\"scrollable\"\n                    scrollButtons=\"on\"\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    aria-label=\"scrollable force tabs example\"\n                >\n                    <Tab label=\"Show posts\" icon={<ViewStreamIcon />} {...a11yProps(0)} />\n                    <Tab label=\"Add new post\" icon={<AddIcon />} {...a11yProps(1)} />\n                    <Tab label=\"Search\" icon={<SearchIcon />} {...a11yProps(2)}/>\n                </Tabs>\n            </AppBar>\n            {/* tab of post list */}\n            <TabPanel value={value} index={0}>\n                <BlogList lista={lista}/>\n            </TabPanel>\n            { /* post adding tab */}\n            <TabPanel value={value} index={1}>\n                <Center>\n                <form noValidate autoComplete=\"off\">\n                    <TextField id=\"outlinedBasic\" label=\"Author\" variant=\"outlined\"\n                               onChange={event => {\n                                   //when value change then update value of variable\n                                   authorOut = event.target.value;\n                               }}\n                    />\n                    <br/>\n                    <br/>\n                    <TextField id=\"outlinedMultiline\"\n                               label=\"Text\"\n                               multiline\n                               rows=\"4\"\n                               variant=\"outlined\"\n                               onChange={event => {\n                                   //when value change then update value of variable\n                                   textOut = event.target.value;\n                               }}/>\n                               <br/>\n                               <br/>\n                               <TextField id=\"tags\"\n                                          label=\"Tags\"\n                                          variant=\"outlined\"\n                                          onChange={event => {\n                                            let valiaikainen = event.target.value;\n                                            tags = valiaikainen.split(\",\");\n                                          }}\n                                          />\n                                          <br/>\n                                          <br/>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"large\"\n                        startIcon={<SaveIcon />}\n                        onClick={ () => {\n                            utils.prototype.addNewPost(authorOut, textOut, tags);\n                            // need set timeout so fetch run before list load again\n                            setTimeout(() => {\n                                load(false, forceUpdate);\n                            }, 500);\n                            }\n                        }\n                    >\n                        Save\n                    </Button>\n                </form>\n                </Center>\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <SearchView />\n            </TabPanel>\n        </div>);\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport commentData from \"./commentData\";\nimport utils from \"./utils\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport IconButton from \"@material-ui/core/IconButton\";\nconst useStyles2 = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        height: '40vh',\n        backgroundColor: theme.palette.background.paper,\n        overflowY: 'scroll',\n    },\n    listaus: {\n        listStyleType: 'none',\n    },\n}));\nvar textOut;\nvar id;\nvar author;\nfunction CommentList(props){\n    const classes2 = useStyles2();\n    const lista = props.lista;\n    const blogId = props.id;\n    const [value, setValue] = React.useState(false);\n    const [, forceUpdate] = React.useReducer(x => x + 1, 0);\n    const handleClickOpen = (index) => {\n        id = lista[index].getID();\n        textOut = lista[index].getText();\n        author = lista[index].getAuthor();\n        setValue(true);\n    };\n    // This call when dialog close\n    const handleClose = () => {\n        //change comment data from backend\n        let apu = new commentData(author,textOut);\n        apu.setID(id);\n        utils.prototype.changeComment(apu, blogId);\n        //load list data again with setTimeout because fetch need time\n        setTimeout(() => {\n            setValue(false);\n            forceUpdate();\n        } , 700);\n    };\n    // This call when dialog close without modify\n    const handleClose2 = () => {\n        setValue(false);\n    };\n    let values = [];\n    for(let lap=0; lap < lista.length; lap++){\n        values.push(<li><h5>Author: {lista[lap].getAuthor()}<IconButton color=\"primary\" aria-label=\"modify\" onClick={() => {\n            //send information of id\n            handleClickOpen(lap);\n        }}>\n            <SettingsIcon />\n        </IconButton></h5><p>{lista[lap].getText()}</p></li>);\n    }\n    return (\n        <div>\n            <div className={classes2.root}>\n                <h2>Comments:</h2>\n                <ul className={classes2.listaus}>\n                    {values}\n                </ul>\n            </div>\n            {/* modify comment */}\n            <Dialog open={value} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Modify this blog post</DialogTitle>\n                <DialogContent>\n                    <h4>{author}</h4>\n                    <TextField\n                        margin=\"dense\"\n                        multiline\n                        id=\"modifyText\"\n                        label=\"Text\"\n                        defaultValue={textOut}\n                        onChange={event => {\n                            //when value change then update value of variable\n                            textOut = event.target.value;\n                        }}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose2} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>);\n}\n\nexport default CommentList;","export default class commentData{\n    constructor(author, text) {\n        this.AUTHOR = author;\n        this.TEXT = text;\n        this.ID = 0;\n    }\n    getAuthor(){\n        return this.AUTHOR;\n    }\n    getText(){\n        return this.TEXT;\n    }\n    setAuthor(uusi){\n        this.AUTHOR = uusi;\n    }\n    setText(uusi){\n        this.TEXT = uusi;\n    }\n    setID(id){\n        this.ID = id;\n    }\n    getID(){\n        return this.ID;\n    }\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport post from \"./post\";\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport utils from \"./utils\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport commentData from \"./commentData\";\nimport CommentList from \"./CommentList\";\n\nvar blogPost;\nvar suorita = false;\nvar nayta = false;\n//text what send when create or modify post\nvar textOut;\n//author what send when create or modify post\nvar authorOut;\n//tags\nvar tags = [];\n//for comment\nvar commentAuthor;\nvar commentText;\n\nexport default class ShowOne extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = { id: 0};\n    }\n    componentDidMount (){\n        const blog  = this.props.match.params.blog;\n        console.log(\"ShowOne data: \" + blog);\n        suorita = true;\n        this.setState({ id: blog, open: false, comment: false, allcomments: []});\n    }\n    render() {\n        const classes = makeStyles((theme) => ({\n            root: {\n                display: 'flex',\n                justifyContent: 'center',\n                flexWrap: 'wrap',\n                '& > *': {\n                    margin: theme.spacing(0.5),\n                },\n            },\n            root2: {\n                width: '100%',\n                height: '85vh',\n                backgroundColor: theme.palette.background.paper,\n            },\n        }));\n        const handleClickOpen = () => {\n            //get data and put it to variables\n            authorOut = blogPost.getAuthor();\n            textOut = blogPost.getText();\n            tags = blogPost.getTags();\n            this.setState({open: true});\n        };\n        // This call when dialog close\n        const handleClose = () => {\n            //change post data from backend\n            utils.prototype.addPostWithTags(blogPost.getID(), authorOut, textOut, tags);\n            //load list data again with setTimeout because fetch need time\n            setTimeout(() => {\n                suorita = true;\n                nayta = false;\n                this.setState({open: false});\n            } , 700);\n        };\n        // This call when dialog close without modify\n        const handleClose2 = () => {\n            this.setState({open: false});\n        };\n        //button action to new comment adding\n        const handleClickOpenComment = () => {\n            this.setState({comment: true});\n        };\n        // This call when dialog close\n        const handleCloseComment = () => {\n            //add comment to backend\n            let outData = new commentData(commentAuthor, commentText);\n            utils.prototype.addComment(outData, this.state.id);\n            //load list data again with setTimeout because fetch need time\n            setTimeout(() => {\n                window.location.reload();\n            } , 750);\n        };\n        // This call when dialog close without modify\n        const handleClose2Comment = () => {\n            this.setState({comment: false});\n        };\n        if(suorita) {\n            let ids = this.state.id;\n            let list = [];\n            fetch(\"http://localhost:8080/blogs/\" + ids).then(response => response.json()).then(data => {\n                console.log(\"json in showdata: \" + JSON.stringify(data));\n                blogPost = new post(data.blogId, data.author, data.text, data.tags);\n                blogPost.setTIME(data.creationTime);\n            }).then(i => {\n                suorita = false;\n                nayta = true;\n                fetch(\"http://localhost:8080/comment/\" + ids).then(response => response.json()).then(data =>{\n                    for (const item of data){\n                        let com = new commentData(item.author, item.text);\n                        com.setID(item.commentId);\n                        list.push(com);\n                    }\n                }).then(i => {\n                   this.setState({id: ids, allcomments: list});\n                });\n            });\n        }\n        if(nayta) {\n            let tagsTexts = blogPost.getTags();\n            let comments = this.state.allcomments;\n            return (<div>\n                <Grid container spacing={3}>\n                    <Grid item xs={8}>\n                        {blogPost.getText()}\n                    </Grid>\n                    <Grid item xs={4}>\n                        <h2>Author: {blogPost.getAuthor()}</h2>\n                        <br/>\n                        <h3>Create time: {blogPost.getTIME()}</h3>\n                        <br/>\n                        {/* open modify view */}\n                        <IconButton color=\"primary\" aria-label=\"modify\" onClick={() => {\n                            //send information of id\n                            handleClickOpen();\n                        }}>\n                            <SettingsIcon />\n                        </IconButton>\n                        <br/>\n                        {/* delete post from backend */}\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => {\n                                utils.prototype.removePost(blogPost.getID());\n                                setTimeout(() => {\n                                    window.location.assign(\"../deletion\");\n                                }, 1000);\n                            }}\n                            startIcon={<DeleteIcon />}\n                        >\n                            Delete\n                        </Button>\n                        <br />\n                        <br />\n                        <h3>Tags:</h3>\n                        <br/>\n                        <Paper className={classes.root}>\n                            {\n                                tagsTexts.map((data2) =>{\n                                    return(<Chip label={data2.tagId} onClick={() =>{\n                                        window.location.assign(\"../tags/\" + data2.tagId);\n                                    }}/>);\n                                })\n                            }\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Grid item spacing={3} xs={12}>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpenComment}>\n                        Add new comment\n                    </Button>\n                    <CommentList lista={comments} id={this.state.id}/>\n                </Grid>\n                {/* post modify */}\n                <Dialog open={this.state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Modify this blog post</DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"modifyAuthor\"\n                            label=\"Author\"\n                            defaultValue={authorOut}\n                            onChange={event => {\n                                //when value change then update value of variable\n                                authorOut = event.target.value;\n                            }}\n                            fullWidth\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            multiline\n                            id=\"modifyText\"\n                            label=\"Text\"\n                            defaultValue={textOut}\n                            onChange={event => {\n                                //when value change then update value of variable\n                                textOut = event.target.value;\n                            }}\n                            fullWidth\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"modifyTags\"\n                            label=\"Tags\"\n                            onChange={event => {\n                                let valiaikainen = event.target.value;\n                                tags = valiaikainen.split(\",\");\n                            }}\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose2} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Save\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                {/* comment adding */}\n                <Dialog open={this.state.comment} onClose={handleCloseComment} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Add new comment</DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"authorcomment\"\n                            label=\"Author\"\n                            onChange={event => {\n                                let valiaikainen = event.target.value;\n                                commentAuthor = valiaikainen;\n                            }}\n                            fullWidth\n                            />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"textcomment\"\n                            label=\"Text\"\n                            onChange={event => {\n                                let valiaikainen = event.target.value;\n                                commentText = valiaikainen;\n                            }}\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose2Comment} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCloseComment} color=\"primary\">\n                            Save\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>);\n        } else{\n            return (<div><h1>Downloading...</h1></div>);\n        }\n    }\n}","import React from 'react';\nimport Center from 'react-center';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nexport default class DeleteDone extends React.Component{\n    render() {\n        const classes = makeStyles((theme) => ({\n            root: {\n                '& > *': {\n                    margin: theme.spacing(1),\n                },\n            },\n        }));\n        return(\n            <Center>\n                <div>\n            <h1 style={{ color: 'green' }}>Delete done</h1>\n                <br/>\n                <Center className={classes.root}>\n                <Button variant=\"contained\" onClick={() =>{\n                    window.location.assign(\"../\");\n                }} color=\"primary\">Ok</Button>\n                </Center>\n                </div>\n            </Center>\n        );\n    }\n}","import React from 'react';\nimport post from \"./post\";\nimport BlogList from \"./BlogList\";\n\nvar suorita = false;\nvar nayta = false;\nvar lista = [];\nexport default class ShowTags extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {id: 0};\n    }\n    componentDidMount (){\n        const tag  = this.props.match.params.tag;\n        suorita = true;\n        this.setState({id: tag});\n    }\n\n    render() {\n        if(suorita){\n            let out = {tagId: this.state.id};\n            fetch(\"http://localhost:8080/blogsWithTag\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(out),\n            }).then(response => response.json()).then(data => {\n                console.log(\"json: \" + JSON.stringify(data));\n                for (const item of data) {\n                    lista.push(new post(item.blogId, item.author, item.text, item.tags));\n                }\n            }).then(i => {\n                suorita = false;\n                nayta = true;\n                this.setState({ id: this.state.id});\n            })\n        }\n        if(nayta){\n            return(<div><h1>List of posts with: {this.state.id}</h1><BlogList lista={lista}/></div>);\n        } else {\n            return (<h1>Downloading...</h1>);\n        }\n    }\n\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Input extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            value: props.value? props.value : '',\n            className: props.className? props.className : '',\n            error: false\n        }\n    }\n\n    //...\n\n    render () {\n        const {handleError, ...opts} = this.props\n        this.handleError = handleError\n        return (\n            <input {...opts} value={this.state.value}\n                   onChange={this.inputChange} className={this.state.className} />\n        )\n    }\n}\n\nInput.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    value: PropTypes.string,\n    handleError: PropTypes.func\n}\n\nexport default Input","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Input from './Input'\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props)\n        if(props.error) {\n            this.state = {\n                failure: 'wrong username or password!',\n                errcount: 0\n            }\n        } else {\n            this.state = { errcount: 0 }\n        }\n    }\n\n    handleError = (field, errmsg) => {\n        if(!field) return\n\n        if(errmsg) {\n            this.setState((prevState) => ({\n                failure: '',\n                errcount: prevState.errcount + 1,\n                errmsgs: {...prevState.errmsgs, [field]: errmsg}\n            }))\n        } else {\n            this.setState((prevState) => ({\n                failure: '',\n                errcount: prevState.errcount===1? 0 : prevState.errcount-1,\n                errmsgs: {...prevState.errmsgs, [field]: ''}\n            }))\n        }\n    }\n\n    renderError = () => {\n        if(this.state.errcount || this.state.failure) {\n            const errmsg = this.state.failure\n                || Object.values(this.state.errmsgs).find(v=>v)\n            return <div className=\"error\">{errmsg}</div>\n        }\n    }\n    handleSubmit = (event) => {\n        event.preventDefault()\n        if(!this.state.errcount) {\n            const data = new FormData(this.form)\n            fetch(this.form.action, {\n                method: this.form.method,\n                body: new URLSearchParams(data)\n            })\n                .then(v => {\n                    if(v.redirected) window.location = v.url\n                })\n                .catch(e => console.warn(e))\n        }\n    }\n\n    render() {\n        const inputs = this.props.inputs.map(\n            ({name, placeholder, type, value, className}, index) => (\n                <Input key={index} name={name} placeholder={placeholder} type={type} value={value}\n                       className={type==='submit'? className : ''} handleError={this.handleError} />\n            )\n        )\n        const errors = this.renderError()\n        return (\n            <form {...this.props} onSubmit={this.handleSubmit} ref={fm => {this.form=fm}} >\n                {inputs}\n                {errors}\n            </form>\n        )\n    }\n}\n\nForm.propTypes = {\n    name: PropTypes.string,\n    action: PropTypes.string,\n    method: PropTypes.string,\n    inputs: PropTypes.array,\n    error: PropTypes.string\n}\n\nexport default Form","import React from 'react';\nimport $ from 'jquery';\nimport Cookies from 'js-cookie';\nimport Form from './Form';\nconst inputs = [{\n    name: \"username\",\n    placeholder: \"username\",\n    type: \"text\"\n},{\n    name: \"password\",\n    placeholder: \"password\",\n    type: \"password\"\n},{\n    type: \"submit\",\n    value: \"Submit\",\n    className: \"btn\"\n}]\n\nconst props = {\n    name: 'loginForm',\n    method: 'POST',\n    action: '/perform_login',\n    inputs: inputs\n}\nconst params = new URLSearchParams(window.location.search)\nvar logout = function() {\n    $.post(\"/logout\", function() {\n        $(\"#user\").html('');\n        localStorage.setItem(\"login\", \"false\");\n    })\n    return true;\n}\nfunction LoginPage(){\n    let login = localStorage.getItem(\"login\") === \"true\";\n    $.get(\"/user\", function(data) {\n        $(\"#user\").html(data.name);\n        localStorage.setItem(\"login\", \"true\");\n    });\n    $.ajaxSetup({\n        beforeSend : function(xhr, settings) {\n            if (settings.type == 'POST' || settings.type == 'PUT'\n                || settings.type == 'DELETE') {\n                if (!(/^http:.*/.test(settings.url) || /^https:.*/\n                    .test(settings.url))) {\n                    // Only send the token to relative URLs i.e. locally.\n                    xhr.setRequestHeader(\"X-XSRF-TOKEN\",\n                        Cookies.get('XSRF-TOKEN'));\n                }\n            }\n        }\n    });\n    if(login){\n        return (\n            <div>\n                <p>logged</p>\n                <div>\n                    Logged in as: <span id=\"user\"></span>\n                </div>\n                <div>\n                    <button onClick={logout} className=\"btn btn-primary\">Logout</button>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <Form {...props} error={params.get('error')}/>\n                <br/>\n                <div>\n                    With GitHub: <a href=\"/oauth2/authorization/github\">click here</a>\n                </div>\n            </div>\n        );\n    }\n}\nexport default LoginPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Route, Link, BrowserRouter} from 'react-router-dom';\nimport ShowOne from \"./ShowOne\";\nimport Deletedone from \"./deleteDone\";\nimport ShowTags from \"./ShowTags\";\nimport LoginPage from \"./LoginPage\";\n\nconst maini = () => <App/>;\nconst posting = (props) => <ShowOne {...props}/>;\nconst del = () => <Deletedone/>;\nconst tags = (props) => <ShowTags {...props}/>;\nconst sign = () => <LoginPage/>;\nclass Help extends React.Component{\n    render() {\n        return (\n          <BrowserRouter>\n            <Route exact={true} path=\"/\" component={maini}/>\n            <Route path=\"/show/:blog\" component={posting} />\n            <Route path=\"/deletion\" component={del} />\n            <Route path=\"/tags/:tag\" component={tags}/>\n            <Route path=\"/login\" component={sign}/>\n          </BrowserRouter>\n        );\n    }\n}\n\nReactDOM.render(<Help />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}